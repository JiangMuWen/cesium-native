// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "KHR_draco_mesh_compressionJsonHandler.h"

#include <CesiumGltf/KHR_draco_mesh_compression.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

KHR_draco_mesh_compressionJsonHandler::KHR_draco_mesh_compressionJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _bufferView(),
      _attributes() {}

void KHR_draco_mesh_compressionJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    KHR_draco_mesh_compression* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
KHR_draco_mesh_compressionJsonHandler::writeObjectKey(
    const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyKHR_draco_mesh_compression(
      KHR_draco_mesh_compression::TypeName,
      str,
      *this->_pObject);
}

void KHR_draco_mesh_compressionJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    CesiumUtility::ExtensibleObject& o,
    const std::string_view& extensionName) {
  std::any& value =
      o.extensions.emplace(extensionName, KHR_draco_mesh_compression())
          .first->second;
  this->reset(
      pParentHandler,
      &std::any_cast<KHR_draco_mesh_compression&>(value));
}

CesiumJsonWriter::IJsonHandler*
KHR_draco_mesh_compressionJsonHandler::writeObjectKeyKHR_draco_mesh_compression(
    const std::string& objectType,
    const std::string_view& str,
    KHR_draco_mesh_compression& o) {
  using namespace std::string_literals;

  if ("bufferView"s == str)
    return property("bufferView", this->_bufferView, o.bufferView);
  if ("attributes"s == str)
    return property("attributes", this->_attributes, o.attributes);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ModelEXT_feature_metadataJsonHandler.h"

#include <CesiumGltf/ModelEXT_feature_metadata.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

ModelEXT_feature_metadataJsonHandler::ModelEXT_feature_metadataJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _schema(context),
      _schemaUri(),
      _statistics(context),
      _featureTables(context),
      _featureTextures(context) {}

void ModelEXT_feature_metadataJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    ModelEXT_feature_metadata* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
ModelEXT_feature_metadataJsonHandler::writeObjectKey(
    const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyModelEXT_feature_metadata(
      ModelEXT_feature_metadata::TypeName,
      str,
      *this->_pObject);
}

void ModelEXT_feature_metadataJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    CesiumUtility::ExtensibleObject& o,
    const std::string_view& extensionName) {
  std::any& value =
      o.extensions.emplace(extensionName, ModelEXT_feature_metadata())
          .first->second;
  this->reset(
      pParentHandler,
      &std::any_cast<ModelEXT_feature_metadata&>(value));
}

CesiumJsonWriter::IJsonHandler*
ModelEXT_feature_metadataJsonHandler::writeObjectKeyModelEXT_feature_metadata(
    const std::string& objectType,
    const std::string_view& str,
    ModelEXT_feature_metadata& o) {
  using namespace std::string_literals;

  if ("schema"s == str)
    return property("schema", this->_schema, o.schema);
  if ("schemaUri"s == str)
    return property("schemaUri", this->_schemaUri, o.schemaUri);
  if ("statistics"s == str)
    return property("statistics", this->_statistics, o.statistics);
  if ("featureTables"s == str)
    return property("featureTables", this->_featureTables, o.featureTables);
  if ("featureTextures"s == str)
    return property(
        "featureTextures",
        this->_featureTextures,
        o.featureTextures);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "MeshPrimitiveEXT_feature_metadataJsonHandler.h"

#include <CesiumGltf/MeshPrimitiveEXT_feature_metadata.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

MeshPrimitiveEXT_feature_metadataJsonHandler::
    MeshPrimitiveEXT_feature_metadataJsonHandler(
        const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _featureIdAttributes(context),
      _featureIdTextures(context),
      _featureTextures() {}

void MeshPrimitiveEXT_feature_metadataJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    MeshPrimitiveEXT_feature_metadata* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
MeshPrimitiveEXT_feature_metadataJsonHandler::writeObjectKey(
    const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyMeshPrimitiveEXT_feature_metadata(
      MeshPrimitiveEXT_feature_metadata::TypeName,
      str,
      *this->_pObject);
}

void MeshPrimitiveEXT_feature_metadataJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    CesiumUtility::ExtensibleObject& o,
    const std::string_view& extensionName) {
  std::any& value =
      o.extensions.emplace(extensionName, MeshPrimitiveEXT_feature_metadata())
          .first->second;
  this->reset(
      pParentHandler,
      &std::any_cast<MeshPrimitiveEXT_feature_metadata&>(value));
}

CesiumJsonWriter::IJsonHandler* MeshPrimitiveEXT_feature_metadataJsonHandler::
    writeObjectKeyMeshPrimitiveEXT_feature_metadata(
        const std::string& objectType,
        const std::string_view& str,
        MeshPrimitiveEXT_feature_metadata& o) {
  using namespace std::string_literals;

  if ("featureIdAttributes"s == str)
    return property(
        "featureIdAttributes",
        this->_featureIdAttributes,
        o.featureIdAttributes);
  if ("featureIdTextures"s == str)
    return property(
        "featureIdTextures",
        this->_featureIdTextures,
        o.featureIdTextures);
  if ("featureTextures"s == str)
    return property(
        "featureTextures",
        this->_featureTextures,
        o.featureTextures);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "FeatureIDTextureJsonHandler.h"

#include <CesiumGltf/FeatureIDTexture.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

FeatureIDTextureJsonHandler::FeatureIDTextureJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _featureTable(),
      _featureIds(context) {}

void FeatureIDTextureJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    FeatureIDTexture* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
FeatureIDTextureJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyFeatureIDTexture(
      FeatureIDTexture::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
FeatureIDTextureJsonHandler::writeObjectKeyFeatureIDTexture(
    const std::string& objectType,
    const std::string_view& str,
    FeatureIDTexture& o) {
  using namespace std::string_literals;

  if ("featureTable"s == str)
    return property("featureTable", this->_featureTable, o.featureTable);
  if ("featureIds"s == str)
    return property("featureIds", this->_featureIds, o.featureIds);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "TextureAccessorJsonHandler.h"

#include <CesiumGltf/TextureAccessor.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

TextureAccessorJsonHandler::TextureAccessorJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _channels(),
      _texture(context) {}

void TextureAccessorJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    TextureAccessor* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
TextureAccessorJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyTextureAccessor(
      TextureAccessor::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
TextureAccessorJsonHandler::writeObjectKeyTextureAccessor(
    const std::string& objectType,
    const std::string_view& str,
    TextureAccessor& o) {
  using namespace std::string_literals;

  if ("channels"s == str)
    return property("channels", this->_channels, o.channels);
  if ("texture"s == str)
    return property("texture", this->_texture, o.texture);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "TextureInfoJsonHandler.h"

#include <CesiumGltf/TextureInfo.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

TextureInfoJsonHandler::TextureInfoJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _index(),
      _texCoord() {}

void TextureInfoJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    TextureInfo* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
TextureInfoJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyTextureInfo(
      TextureInfo::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
TextureInfoJsonHandler::writeObjectKeyTextureInfo(
    const std::string& objectType,
    const std::string_view& str,
    TextureInfo& o) {
  using namespace std::string_literals;

  if ("index"s == str)
    return property("index", this->_index, o.index);
  if ("texCoord"s == str)
    return property("texCoord", this->_texCoord, o.texCoord);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "FeatureIDAttributeJsonHandler.h"

#include <CesiumGltf/FeatureIDAttribute.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

FeatureIDAttributeJsonHandler::FeatureIDAttributeJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _featureTable(),
      _featureIds(context) {}

void FeatureIDAttributeJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    FeatureIDAttribute* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
FeatureIDAttributeJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyFeatureIDAttribute(
      FeatureIDAttribute::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
FeatureIDAttributeJsonHandler::writeObjectKeyFeatureIDAttribute(
    const std::string& objectType,
    const std::string_view& str,
    FeatureIDAttribute& o) {
  using namespace std::string_literals;

  if ("featureTable"s == str)
    return property("featureTable", this->_featureTable, o.featureTable);
  if ("featureIds"s == str)
    return property("featureIds", this->_featureIds, o.featureIds);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "FeatureIDsJsonHandler.h"

#include <CesiumGltf/FeatureIDs.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

FeatureIDsJsonHandler::FeatureIDsJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _attribute(),
      _constant(),
      _divisor() {}

void FeatureIDsJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    FeatureIDs* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
FeatureIDsJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyFeatureIDs(
      FeatureIDs::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* FeatureIDsJsonHandler::writeObjectKeyFeatureIDs(
    const std::string& objectType,
    const std::string_view& str,
    FeatureIDs& o) {
  using namespace std::string_literals;

  if ("attribute"s == str)
    return property("attribute", this->_attribute, o.attribute);
  if ("constant"s == str)
    return property("constant", this->_constant, o.constant);
  if ("divisor"s == str)
    return property("divisor", this->_divisor, o.divisor);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "FeatureTextureJsonHandler.h"

#include <CesiumGltf/FeatureTexture.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

FeatureTextureJsonHandler::FeatureTextureJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _classProperty(),
      _properties(context) {}

void FeatureTextureJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    FeatureTexture* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
FeatureTextureJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyFeatureTexture(
      FeatureTexture::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
FeatureTextureJsonHandler::writeObjectKeyFeatureTexture(
    const std::string& objectType,
    const std::string_view& str,
    FeatureTexture& o) {
  using namespace std::string_literals;

  if ("classProperty"s == str)
    return property("classProperty", this->_classProperty, o.classProperty);
  if ("properties"s == str)
    return property("properties", this->_properties, o.properties);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "FeatureTableJsonHandler.h"

#include <CesiumGltf/FeatureTable.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

FeatureTableJsonHandler::FeatureTableJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _classProperty(),
      _count(),
      _properties(context) {}

void FeatureTableJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    FeatureTable* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
FeatureTableJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyFeatureTable(
      FeatureTable::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
FeatureTableJsonHandler::writeObjectKeyFeatureTable(
    const std::string& objectType,
    const std::string_view& str,
    FeatureTable& o) {
  using namespace std::string_literals;

  if ("classProperty"s == str)
    return property("classProperty", this->_classProperty, o.classProperty);
  if ("count"s == str)
    return property("count", this->_count, o.count);
  if ("properties"s == str)
    return property("properties", this->_properties, o.properties);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "FeatureTablePropertyJsonHandler.h"

#include <CesiumGltf/FeatureTableProperty.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

FeatureTablePropertyJsonHandler::FeatureTablePropertyJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _bufferView(),
      _offsetType(),
      _arrayOffsetBufferView(),
      _stringOffsetBufferView() {}

void FeatureTablePropertyJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    FeatureTableProperty* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
FeatureTablePropertyJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyFeatureTableProperty(
      FeatureTableProperty::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
FeatureTablePropertyJsonHandler::writeObjectKeyFeatureTableProperty(
    const std::string& objectType,
    const std::string_view& str,
    FeatureTableProperty& o) {
  using namespace std::string_literals;

  if ("bufferView"s == str)
    return property("bufferView", this->_bufferView, o.bufferView);
  if ("offsetType"s == str)
    return property("offsetType", this->_offsetType, o.offsetType);
  if ("arrayOffsetBufferView"s == str)
    return property(
        "arrayOffsetBufferView",
        this->_arrayOffsetBufferView,
        o.arrayOffsetBufferView);
  if ("stringOffsetBufferView"s == str)
    return property(
        "stringOffsetBufferView",
        this->_stringOffsetBufferView,
        o.stringOffsetBufferView);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "StatisticsJsonHandler.h"

#include <CesiumGltf/Statistics.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

StatisticsJsonHandler::StatisticsJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _classes(context) {}

void StatisticsJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Statistics* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
StatisticsJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyStatistics(
      Statistics::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* StatisticsJsonHandler::writeObjectKeyStatistics(
    const std::string& objectType,
    const std::string_view& str,
    Statistics& o) {
  using namespace std::string_literals;

  if ("classes"s == str)
    return property("classes", this->_classes, o.classes);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ClassStatisticsJsonHandler.h"

#include <CesiumGltf/ClassStatistics.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

ClassStatisticsJsonHandler::ClassStatisticsJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _count(),
      _properties(context) {}

void ClassStatisticsJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    ClassStatistics* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
ClassStatisticsJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyClassStatistics(
      ClassStatistics::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
ClassStatisticsJsonHandler::writeObjectKeyClassStatistics(
    const std::string& objectType,
    const std::string_view& str,
    ClassStatistics& o) {
  using namespace std::string_literals;

  if ("count"s == str)
    return property("count", this->_count, o.count);
  if ("properties"s == str)
    return property("properties", this->_properties, o.properties);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "PropertyStatisticsJsonHandler.h"

#include <CesiumGltf/PropertyStatistics.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

PropertyStatisticsJsonHandler::PropertyStatisticsJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _min(),
      _max(),
      _mean(),
      _median(),
      _standardDeviation(),
      _variance(),
      _sum(),
      _occurrences() {}

void PropertyStatisticsJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    PropertyStatistics* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
PropertyStatisticsJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyPropertyStatistics(
      PropertyStatistics::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
PropertyStatisticsJsonHandler::writeObjectKeyPropertyStatistics(
    const std::string& objectType,
    const std::string_view& str,
    PropertyStatistics& o) {
  using namespace std::string_literals;

  if ("min"s == str)
    return property("min", this->_min, o.min);
  if ("max"s == str)
    return property("max", this->_max, o.max);
  if ("mean"s == str)
    return property("mean", this->_mean, o.mean);
  if ("median"s == str)
    return property("median", this->_median, o.median);
  if ("standardDeviation"s == str)
    return property(
        "standardDeviation",
        this->_standardDeviation,
        o.standardDeviation);
  if ("variance"s == str)
    return property("variance", this->_variance, o.variance);
  if ("sum"s == str)
    return property("sum", this->_sum, o.sum);
  if ("occurrences"s == str)
    return property("occurrences", this->_occurrences, o.occurrences);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "SchemaJsonHandler.h"

#include <CesiumGltf/Schema.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

SchemaJsonHandler::SchemaJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _name(),
      _description(),
      _version(),
      _classes(context),
      _enums(context) {}

void SchemaJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Schema* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
SchemaJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeySchema(Schema::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* SchemaJsonHandler::writeObjectKeySchema(
    const std::string& objectType,
    const std::string_view& str,
    Schema& o) {
  using namespace std::string_literals;

  if ("name"s == str)
    return property("name", this->_name, o.name);
  if ("description"s == str)
    return property("description", this->_description, o.description);
  if ("version"s == str)
    return property("version", this->_version, o.version);
  if ("classes"s == str)
    return property("classes", this->_classes, o.classes);
  if ("enums"s == str)
    return property("enums", this->_enums, o.enums);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "EnumJsonHandler.h"

#include <CesiumGltf/Enum.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

EnumJsonHandler::EnumJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _name(),
      _description(),
      _valueType(),
      _values(context) {}

void EnumJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Enum* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
EnumJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyEnum(Enum::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* EnumJsonHandler::writeObjectKeyEnum(
    const std::string& objectType,
    const std::string_view& str,
    Enum& o) {
  using namespace std::string_literals;

  if ("name"s == str)
    return property("name", this->_name, o.name);
  if ("description"s == str)
    return property("description", this->_description, o.description);
  if ("valueType"s == str)
    return property("valueType", this->_valueType, o.valueType);
  if ("values"s == str)
    return property("values", this->_values, o.values);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "EnumValueJsonHandler.h"

#include <CesiumGltf/EnumValue.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

EnumValueJsonHandler::EnumValueJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _name(),
      _description(),
      _value() {}

void EnumValueJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    EnumValue* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
EnumValueJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyEnumValue(
      EnumValue::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* EnumValueJsonHandler::writeObjectKeyEnumValue(
    const std::string& objectType,
    const std::string_view& str,
    EnumValue& o) {
  using namespace std::string_literals;

  if ("name"s == str)
    return property("name", this->_name, o.name);
  if ("description"s == str)
    return property("description", this->_description, o.description);
  if ("value"s == str)
    return property("value", this->_value, o.value);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ClassJsonHandler.h"

#include <CesiumGltf/Class.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

ClassJsonHandler::ClassJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _name(),
      _description(),
      _properties(context) {}

void ClassJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Class* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
ClassJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyClass(Class::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* ClassJsonHandler::writeObjectKeyClass(
    const std::string& objectType,
    const std::string_view& str,
    Class& o) {
  using namespace std::string_literals;

  if ("name"s == str)
    return property("name", this->_name, o.name);
  if ("description"s == str)
    return property("description", this->_description, o.description);
  if ("properties"s == str)
    return property("properties", this->_properties, o.properties);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ClassPropertyJsonHandler.h"

#include <CesiumGltf/ClassProperty.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

ClassPropertyJsonHandler::ClassPropertyJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _name(),
      _description(),
      _type(),
      _enumType(),
      _componentType(),
      _componentCount(),
      _normalized(),
      _max(),
      _min(),
      _defaultProperty(),
      _optional(),
      _semantic() {}

void ClassPropertyJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    ClassProperty* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
ClassPropertyJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyClassProperty(
      ClassProperty::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
ClassPropertyJsonHandler::writeObjectKeyClassProperty(
    const std::string& objectType,
    const std::string_view& str,
    ClassProperty& o) {
  using namespace std::string_literals;

  if ("name"s == str)
    return property("name", this->_name, o.name);
  if ("description"s == str)
    return property("description", this->_description, o.description);
  if ("type"s == str)
    return property("type", this->_type, o.type);
  if ("enumType"s == str)
    return property("enumType", this->_enumType, o.enumType);
  if ("componentType"s == str)
    return property("componentType", this->_componentType, o.componentType);
  if ("componentCount"s == str)
    return property("componentCount", this->_componentCount, o.componentCount);
  if ("normalized"s == str)
    return property("normalized", this->_normalized, o.normalized);
  if ("max"s == str)
    return property("max", this->_max, o.max);
  if ("min"s == str)
    return property("min", this->_min, o.min);
  if ("defaultProperty"s == str)
    return property(
        "defaultProperty",
        this->_defaultProperty,
        o.defaultProperty);
  if ("optional"s == str)
    return property("optional", this->_optional, o.optional);
  if ("semantic"s == str)
    return property("semantic", this->_semantic, o.semantic);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ModelJsonHandler.h"

#include <CesiumGltf/Model.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

ModelJsonHandler::ModelJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _extensionsUsed(),
      _extensionsRequired(),
      _accessors(context),
      _animations(context),
      _asset(context),
      _buffers(context),
      _bufferViews(context),
      _cameras(context),
      _images(context),
      _materials(context),
      _meshes(context),
      _nodes(context),
      _samplers(context),
      _scene(),
      _scenes(context),
      _skins(context),
      _textures(context) {}

void ModelJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Model* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
ModelJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyModel(Model::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* ModelJsonHandler::writeObjectKeyModel(
    const std::string& objectType,
    const std::string_view& str,
    Model& o) {
  using namespace std::string_literals;

  if ("extensionsUsed"s == str)
    return property("extensionsUsed", this->_extensionsUsed, o.extensionsUsed);
  if ("extensionsRequired"s == str)
    return property(
        "extensionsRequired",
        this->_extensionsRequired,
        o.extensionsRequired);
  if ("accessors"s == str)
    return property("accessors", this->_accessors, o.accessors);
  if ("animations"s == str)
    return property("animations", this->_animations, o.animations);
  if ("asset"s == str)
    return property("asset", this->_asset, o.asset);
  if ("buffers"s == str)
    return property("buffers", this->_buffers, o.buffers);
  if ("bufferViews"s == str)
    return property("bufferViews", this->_bufferViews, o.bufferViews);
  if ("cameras"s == str)
    return property("cameras", this->_cameras, o.cameras);
  if ("images"s == str)
    return property("images", this->_images, o.images);
  if ("materials"s == str)
    return property("materials", this->_materials, o.materials);
  if ("meshes"s == str)
    return property("meshes", this->_meshes, o.meshes);
  if ("nodes"s == str)
    return property("nodes", this->_nodes, o.nodes);
  if ("samplers"s == str)
    return property("samplers", this->_samplers, o.samplers);
  if ("scene"s == str)
    return property("scene", this->_scene, o.scene);
  if ("scenes"s == str)
    return property("scenes", this->_scenes, o.scenes);
  if ("skins"s == str)
    return property("skins", this->_skins, o.skins);
  if ("textures"s == str)
    return property("textures", this->_textures, o.textures);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "TextureJsonHandler.h"

#include <CesiumGltf/Texture.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

TextureJsonHandler::TextureJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context), _sampler(), _source() {}

void TextureJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Texture* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
TextureJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyTexture(Texture::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* TextureJsonHandler::writeObjectKeyTexture(
    const std::string& objectType,
    const std::string_view& str,
    Texture& o) {
  using namespace std::string_literals;

  if ("sampler"s == str)
    return property("sampler", this->_sampler, o.sampler);
  if ("source"s == str)
    return property("source", this->_source, o.source);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "SkinJsonHandler.h"

#include <CesiumGltf/Skin.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

SkinJsonHandler::SkinJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _inverseBindMatrices(),
      _skeleton(),
      _joints() {}

void SkinJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Skin* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
SkinJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeySkin(Skin::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* SkinJsonHandler::writeObjectKeySkin(
    const std::string& objectType,
    const std::string_view& str,
    Skin& o) {
  using namespace std::string_literals;

  if ("inverseBindMatrices"s == str)
    return property(
        "inverseBindMatrices",
        this->_inverseBindMatrices,
        o.inverseBindMatrices);
  if ("skeleton"s == str)
    return property("skeleton", this->_skeleton, o.skeleton);
  if ("joints"s == str)
    return property("joints", this->_joints, o.joints);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "SceneJsonHandler.h"

#include <CesiumGltf/Scene.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

SceneJsonHandler::SceneJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context), _nodes() {}

void SceneJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Scene* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
SceneJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyScene(Scene::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* SceneJsonHandler::writeObjectKeyScene(
    const std::string& objectType,
    const std::string_view& str,
    Scene& o) {
  using namespace std::string_literals;

  if ("nodes"s == str)
    return property("nodes", this->_nodes, o.nodes);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "SamplerJsonHandler.h"

#include <CesiumGltf/Sampler.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

SamplerJsonHandler::SamplerJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _magFilter(),
      _minFilter(),
      _wrapS(),
      _wrapT() {}

void SamplerJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Sampler* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
SamplerJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeySampler(Sampler::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* SamplerJsonHandler::writeObjectKeySampler(
    const std::string& objectType,
    const std::string_view& str,
    Sampler& o) {
  using namespace std::string_literals;

  if ("magFilter"s == str)
    return property("magFilter", this->_magFilter, o.magFilter);
  if ("minFilter"s == str)
    return property("minFilter", this->_minFilter, o.minFilter);
  if ("wrapS"s == str)
    return property("wrapS", this->_wrapS, o.wrapS);
  if ("wrapT"s == str)
    return property("wrapT", this->_wrapT, o.wrapT);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "NodeJsonHandler.h"

#include <CesiumGltf/Node.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

NodeJsonHandler::NodeJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _camera(),
      _children(),
      _skin(),
      _matrix(),
      _mesh(),
      _rotation(),
      _scale(),
      _translation(),
      _weights() {}

void NodeJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Node* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
NodeJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyNode(Node::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* NodeJsonHandler::writeObjectKeyNode(
    const std::string& objectType,
    const std::string_view& str,
    Node& o) {
  using namespace std::string_literals;

  if ("camera"s == str)
    return property("camera", this->_camera, o.camera);
  if ("children"s == str)
    return property("children", this->_children, o.children);
  if ("skin"s == str)
    return property("skin", this->_skin, o.skin);
  if ("matrix"s == str)
    return property("matrix", this->_matrix, o.matrix);
  if ("mesh"s == str)
    return property("mesh", this->_mesh, o.mesh);
  if ("rotation"s == str)
    return property("rotation", this->_rotation, o.rotation);
  if ("scale"s == str)
    return property("scale", this->_scale, o.scale);
  if ("translation"s == str)
    return property("translation", this->_translation, o.translation);
  if ("weights"s == str)
    return property("weights", this->_weights, o.weights);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "MeshJsonHandler.h"

#include <CesiumGltf/Mesh.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

MeshJsonHandler::MeshJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context), _primitives(context), _weights() {}

void MeshJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Mesh* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
MeshJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyMesh(Mesh::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* MeshJsonHandler::writeObjectKeyMesh(
    const std::string& objectType,
    const std::string_view& str,
    Mesh& o) {
  using namespace std::string_literals;

  if ("primitives"s == str)
    return property("primitives", this->_primitives, o.primitives);
  if ("weights"s == str)
    return property("weights", this->_weights, o.weights);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "MeshPrimitiveJsonHandler.h"

#include <CesiumGltf/MeshPrimitive.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

MeshPrimitiveJsonHandler::MeshPrimitiveJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _attributes(),
      _indices(),
      _material(),
      _mode(),
      _targets() {}

void MeshPrimitiveJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    MeshPrimitive* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
MeshPrimitiveJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyMeshPrimitive(
      MeshPrimitive::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
MeshPrimitiveJsonHandler::writeObjectKeyMeshPrimitive(
    const std::string& objectType,
    const std::string_view& str,
    MeshPrimitive& o) {
  using namespace std::string_literals;

  if ("attributes"s == str)
    return property("attributes", this->_attributes, o.attributes);
  if ("indices"s == str)
    return property("indices", this->_indices, o.indices);
  if ("material"s == str)
    return property("material", this->_material, o.material);
  if ("mode"s == str)
    return property("mode", this->_mode, o.mode);
  if ("targets"s == str)
    return property("targets", this->_targets, o.targets);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "MaterialJsonHandler.h"

#include <CesiumGltf/Material.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

MaterialJsonHandler::MaterialJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _pbrMetallicRoughness(context),
      _normalTexture(context),
      _occlusionTexture(context),
      _emissiveTexture(context),
      _emissiveFactor(),
      _alphaMode(),
      _alphaCutoff(),
      _doubleSided() {}

void MaterialJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Material* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
MaterialJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyMaterial(Material::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* MaterialJsonHandler::writeObjectKeyMaterial(
    const std::string& objectType,
    const std::string_view& str,
    Material& o) {
  using namespace std::string_literals;

  if ("pbrMetallicRoughness"s == str)
    return property(
        "pbrMetallicRoughness",
        this->_pbrMetallicRoughness,
        o.pbrMetallicRoughness);
  if ("normalTexture"s == str)
    return property("normalTexture", this->_normalTexture, o.normalTexture);
  if ("occlusionTexture"s == str)
    return property(
        "occlusionTexture",
        this->_occlusionTexture,
        o.occlusionTexture);
  if ("emissiveTexture"s == str)
    return property(
        "emissiveTexture",
        this->_emissiveTexture,
        o.emissiveTexture);
  if ("emissiveFactor"s == str)
    return property("emissiveFactor", this->_emissiveFactor, o.emissiveFactor);
  if ("alphaMode"s == str)
    return property("alphaMode", this->_alphaMode, o.alphaMode);
  if ("alphaCutoff"s == str)
    return property("alphaCutoff", this->_alphaCutoff, o.alphaCutoff);
  if ("doubleSided"s == str)
    return property("doubleSided", this->_doubleSided, o.doubleSided);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "MaterialOcclusionTextureInfoJsonHandler.h"

#include <CesiumGltf/MaterialOcclusionTextureInfo.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

MaterialOcclusionTextureInfoJsonHandler::
    MaterialOcclusionTextureInfoJsonHandler(
        const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : TextureInfoJsonHandler(context), _strength() {}

void MaterialOcclusionTextureInfoJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    MaterialOcclusionTextureInfo* pObject) {
  TextureInfoJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
MaterialOcclusionTextureInfoJsonHandler::writeObjectKey(
    const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyMaterialOcclusionTextureInfo(
      MaterialOcclusionTextureInfo::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* MaterialOcclusionTextureInfoJsonHandler::
    writeObjectKeyMaterialOcclusionTextureInfo(
        const std::string& objectType,
        const std::string_view& str,
        MaterialOcclusionTextureInfo& o) {
  using namespace std::string_literals;

  if ("strength"s == str)
    return property("strength", this->_strength, o.strength);

  return this->writeObjectKeyTextureInfo(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "MaterialNormalTextureInfoJsonHandler.h"

#include <CesiumGltf/MaterialNormalTextureInfo.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

MaterialNormalTextureInfoJsonHandler::MaterialNormalTextureInfoJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : TextureInfoJsonHandler(context), _scale() {}

void MaterialNormalTextureInfoJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    MaterialNormalTextureInfo* pObject) {
  TextureInfoJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
MaterialNormalTextureInfoJsonHandler::writeObjectKey(
    const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyMaterialNormalTextureInfo(
      MaterialNormalTextureInfo::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
MaterialNormalTextureInfoJsonHandler::writeObjectKeyMaterialNormalTextureInfo(
    const std::string& objectType,
    const std::string_view& str,
    MaterialNormalTextureInfo& o) {
  using namespace std::string_literals;

  if ("scale"s == str)
    return property("scale", this->_scale, o.scale);

  return this->writeObjectKeyTextureInfo(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "MaterialPBRMetallicRoughnessJsonHandler.h"

#include <CesiumGltf/MaterialPBRMetallicRoughness.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

MaterialPBRMetallicRoughnessJsonHandler::
    MaterialPBRMetallicRoughnessJsonHandler(
        const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _baseColorFactor(),
      _baseColorTexture(context),
      _metallicFactor(),
      _roughnessFactor(),
      _metallicRoughnessTexture(context) {}

void MaterialPBRMetallicRoughnessJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    MaterialPBRMetallicRoughness* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
MaterialPBRMetallicRoughnessJsonHandler::writeObjectKey(
    const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyMaterialPBRMetallicRoughness(
      MaterialPBRMetallicRoughness::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* MaterialPBRMetallicRoughnessJsonHandler::
    writeObjectKeyMaterialPBRMetallicRoughness(
        const std::string& objectType,
        const std::string_view& str,
        MaterialPBRMetallicRoughness& o) {
  using namespace std::string_literals;

  if ("baseColorFactor"s == str)
    return property(
        "baseColorFactor",
        this->_baseColorFactor,
        o.baseColorFactor);
  if ("baseColorTexture"s == str)
    return property(
        "baseColorTexture",
        this->_baseColorTexture,
        o.baseColorTexture);
  if ("metallicFactor"s == str)
    return property("metallicFactor", this->_metallicFactor, o.metallicFactor);
  if ("roughnessFactor"s == str)
    return property(
        "roughnessFactor",
        this->_roughnessFactor,
        o.roughnessFactor);
  if ("metallicRoughnessTexture"s == str)
    return property(
        "metallicRoughnessTexture",
        this->_metallicRoughnessTexture,
        o.metallicRoughnessTexture);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "ImageJsonHandler.h"

#include <CesiumGltf/Image.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

ImageJsonHandler::ImageJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context), _uri(), _mimeType(), _bufferView() {}

void ImageJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Image* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
ImageJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyImage(Image::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* ImageJsonHandler::writeObjectKeyImage(
    const std::string& objectType,
    const std::string_view& str,
    Image& o) {
  using namespace std::string_literals;

  if ("uri"s == str)
    return property("uri", this->_uri, o.uri);
  if ("mimeType"s == str)
    return property("mimeType", this->_mimeType, o.mimeType);
  if ("bufferView"s == str)
    return property("bufferView", this->_bufferView, o.bufferView);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "CameraJsonHandler.h"

#include <CesiumGltf/Camera.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

CameraJsonHandler::CameraJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _orthographic(context),
      _perspective(context),
      _type() {}

void CameraJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Camera* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
CameraJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyCamera(Camera::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* CameraJsonHandler::writeObjectKeyCamera(
    const std::string& objectType,
    const std::string_view& str,
    Camera& o) {
  using namespace std::string_literals;

  if ("orthographic"s == str)
    return property("orthographic", this->_orthographic, o.orthographic);
  if ("perspective"s == str)
    return property("perspective", this->_perspective, o.perspective);
  if ("type"s == str)
    return property("type", this->_type, o.type);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "CameraPerspectiveJsonHandler.h"

#include <CesiumGltf/CameraPerspective.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

CameraPerspectiveJsonHandler::CameraPerspectiveJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _aspectRatio(),
      _yfov(),
      _zfar(),
      _znear() {}

void CameraPerspectiveJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    CameraPerspective* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
CameraPerspectiveJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyCameraPerspective(
      CameraPerspective::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
CameraPerspectiveJsonHandler::writeObjectKeyCameraPerspective(
    const std::string& objectType,
    const std::string_view& str,
    CameraPerspective& o) {
  using namespace std::string_literals;

  if ("aspectRatio"s == str)
    return property("aspectRatio", this->_aspectRatio, o.aspectRatio);
  if ("yfov"s == str)
    return property("yfov", this->_yfov, o.yfov);
  if ("zfar"s == str)
    return property("zfar", this->_zfar, o.zfar);
  if ("znear"s == str)
    return property("znear", this->_znear, o.znear);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "CameraOrthographicJsonHandler.h"

#include <CesiumGltf/CameraOrthographic.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

CameraOrthographicJsonHandler::CameraOrthographicJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _xmag(),
      _ymag(),
      _zfar(),
      _znear() {}

void CameraOrthographicJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    CameraOrthographic* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
CameraOrthographicJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyCameraOrthographic(
      CameraOrthographic::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
CameraOrthographicJsonHandler::writeObjectKeyCameraOrthographic(
    const std::string& objectType,
    const std::string_view& str,
    CameraOrthographic& o) {
  using namespace std::string_literals;

  if ("xmag"s == str)
    return property("xmag", this->_xmag, o.xmag);
  if ("ymag"s == str)
    return property("ymag", this->_ymag, o.ymag);
  if ("zfar"s == str)
    return property("zfar", this->_zfar, o.zfar);
  if ("znear"s == str)
    return property("znear", this->_znear, o.znear);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "BufferViewJsonHandler.h"

#include <CesiumGltf/BufferView.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

BufferViewJsonHandler::BufferViewJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _buffer(),
      _byteOffset(),
      _byteLength(),
      _byteStride(),
      _target() {}

void BufferViewJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    BufferView* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
BufferViewJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyBufferView(
      BufferView::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* BufferViewJsonHandler::writeObjectKeyBufferView(
    const std::string& objectType,
    const std::string_view& str,
    BufferView& o) {
  using namespace std::string_literals;

  if ("buffer"s == str)
    return property("buffer", this->_buffer, o.buffer);
  if ("byteOffset"s == str)
    return property("byteOffset", this->_byteOffset, o.byteOffset);
  if ("byteLength"s == str)
    return property("byteLength", this->_byteLength, o.byteLength);
  if ("byteStride"s == str)
    return property("byteStride", this->_byteStride, o.byteStride);
  if ("target"s == str)
    return property("target", this->_target, o.target);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "BufferJsonHandler.h"

#include <CesiumGltf/Buffer.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

BufferJsonHandler::BufferJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context), _uri(), _byteLength() {}

void BufferJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Buffer* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
BufferJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyBuffer(Buffer::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* BufferJsonHandler::writeObjectKeyBuffer(
    const std::string& objectType,
    const std::string_view& str,
    Buffer& o) {
  using namespace std::string_literals;

  if ("uri"s == str)
    return property("uri", this->_uri, o.uri);
  if ("byteLength"s == str)
    return property("byteLength", this->_byteLength, o.byteLength);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AssetJsonHandler.h"

#include <CesiumGltf/Asset.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AssetJsonHandler::AssetJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _copyright(),
      _generator(),
      _version(),
      _minVersion() {}

void AssetJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Asset* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AssetJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAsset(Asset::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* AssetJsonHandler::writeObjectKeyAsset(
    const std::string& objectType,
    const std::string_view& str,
    Asset& o) {
  using namespace std::string_literals;

  if ("copyright"s == str)
    return property("copyright", this->_copyright, o.copyright);
  if ("generator"s == str)
    return property("generator", this->_generator, o.generator);
  if ("version"s == str)
    return property("version", this->_version, o.version);
  if ("minVersion"s == str)
    return property("minVersion", this->_minVersion, o.minVersion);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AnimationJsonHandler.h"

#include <CesiumGltf/Animation.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AnimationJsonHandler::AnimationJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context), _channels(context), _samplers(context) {}

void AnimationJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Animation* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AnimationJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAnimation(
      Animation::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* AnimationJsonHandler::writeObjectKeyAnimation(
    const std::string& objectType,
    const std::string_view& str,
    Animation& o) {
  using namespace std::string_literals;

  if ("channels"s == str)
    return property("channels", this->_channels, o.channels);
  if ("samplers"s == str)
    return property("samplers", this->_samplers, o.samplers);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AnimationSamplerJsonHandler.h"

#include <CesiumGltf/AnimationSampler.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AnimationSamplerJsonHandler::AnimationSamplerJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _input(),
      _interpolation(),
      _output() {}

void AnimationSamplerJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    AnimationSampler* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AnimationSamplerJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAnimationSampler(
      AnimationSampler::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
AnimationSamplerJsonHandler::writeObjectKeyAnimationSampler(
    const std::string& objectType,
    const std::string_view& str,
    AnimationSampler& o) {
  using namespace std::string_literals;

  if ("input"s == str)
    return property("input", this->_input, o.input);
  if ("interpolation"s == str)
    return property("interpolation", this->_interpolation, o.interpolation);
  if ("output"s == str)
    return property("output", this->_output, o.output);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AnimationChannelJsonHandler.h"

#include <CesiumGltf/AnimationChannel.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AnimationChannelJsonHandler::AnimationChannelJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _sampler(),
      _target(context) {}

void AnimationChannelJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    AnimationChannel* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AnimationChannelJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAnimationChannel(
      AnimationChannel::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
AnimationChannelJsonHandler::writeObjectKeyAnimationChannel(
    const std::string& objectType,
    const std::string_view& str,
    AnimationChannel& o) {
  using namespace std::string_literals;

  if ("sampler"s == str)
    return property("sampler", this->_sampler, o.sampler);
  if ("target"s == str)
    return property("target", this->_target, o.target);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AnimationChannelTargetJsonHandler.h"

#include <CesiumGltf/AnimationChannelTarget.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AnimationChannelTargetJsonHandler::AnimationChannelTargetJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _node(),
      _path() {}

void AnimationChannelTargetJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    AnimationChannelTarget* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AnimationChannelTargetJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAnimationChannelTarget(
      AnimationChannelTarget::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
AnimationChannelTargetJsonHandler::writeObjectKeyAnimationChannelTarget(
    const std::string& objectType,
    const std::string_view& str,
    AnimationChannelTarget& o) {
  using namespace std::string_literals;

  if ("node"s == str)
    return property("node", this->_node, o.node);
  if ("path"s == str)
    return property("path", this->_path, o.path);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AccessorJsonHandler.h"

#include <CesiumGltf/Accessor.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AccessorJsonHandler::AccessorJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : NamedObjectJsonHandler(context),
      _bufferView(),
      _byteOffset(),
      _componentType(),
      _normalized(),
      _count(),
      _type(),
      _max(),
      _min(),
      _sparse(context) {}

void AccessorJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    Accessor* pObject) {
  NamedObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AccessorJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAccessor(Accessor::TypeName, str, *this->_pObject);
}

CesiumJsonWriter::IJsonHandler* AccessorJsonHandler::writeObjectKeyAccessor(
    const std::string& objectType,
    const std::string_view& str,
    Accessor& o) {
  using namespace std::string_literals;

  if ("bufferView"s == str)
    return property("bufferView", this->_bufferView, o.bufferView);
  if ("byteOffset"s == str)
    return property("byteOffset", this->_byteOffset, o.byteOffset);
  if ("componentType"s == str)
    return property("componentType", this->_componentType, o.componentType);
  if ("normalized"s == str)
    return property("normalized", this->_normalized, o.normalized);
  if ("count"s == str)
    return property("count", this->_count, o.count);
  if ("type"s == str)
    return property("type", this->_type, o.type);
  if ("max"s == str)
    return property("max", this->_max, o.max);
  if ("min"s == str)
    return property("min", this->_min, o.min);
  if ("sparse"s == str)
    return property("sparse", this->_sparse, o.sparse);

  return this->writeObjectKeyNamedObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AccessorSparseJsonHandler.h"

#include <CesiumGltf/AccessorSparse.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AccessorSparseJsonHandler::AccessorSparseJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _count(),
      _indices(context),
      _values(context) {}

void AccessorSparseJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    AccessorSparse* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AccessorSparseJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAccessorSparse(
      AccessorSparse::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
AccessorSparseJsonHandler::writeObjectKeyAccessorSparse(
    const std::string& objectType,
    const std::string_view& str,
    AccessorSparse& o) {
  using namespace std::string_literals;

  if ("count"s == str)
    return property("count", this->_count, o.count);
  if ("indices"s == str)
    return property("indices", this->_indices, o.indices);
  if ("values"s == str)
    return property("values", this->_values, o.values);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AccessorSparseValuesJsonHandler.h"

#include <CesiumGltf/AccessorSparseValues.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AccessorSparseValuesJsonHandler::AccessorSparseValuesJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _bufferView(),
      _byteOffset() {}

void AccessorSparseValuesJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    AccessorSparseValues* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AccessorSparseValuesJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAccessorSparseValues(
      AccessorSparseValues::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
AccessorSparseValuesJsonHandler::writeObjectKeyAccessorSparseValues(
    const std::string& objectType,
    const std::string_view& str,
    AccessorSparseValues& o) {
  using namespace std::string_literals;

  if ("bufferView"s == str)
    return property("bufferView", this->_bufferView, o.bufferView);
  if ("byteOffset"s == str)
    return property("byteOffset", this->_byteOffset, o.byteOffset);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#include "AccessorSparseIndicesJsonHandler.h"

#include <CesiumGltf/AccessorSparseIndices.h>

#include <cassert>
#include <string>

using namespace CesiumGltf;

AccessorSparseIndicesJsonHandler::AccessorSparseIndicesJsonHandler(
    const CesiumJsonWriter::ExtensionWriterContext& context) noexcept
    : CesiumJsonWriter::ExtensibleObjectJsonHandler(context),
      _bufferView(),
      _byteOffset(),
      _componentType() {}

void AccessorSparseIndicesJsonHandler::reset(
    CesiumJsonWriter::IJsonHandler* pParentHandler,
    AccessorSparseIndices* pObject) {
  CesiumJsonWriter::ExtensibleObjectJsonHandler::reset(pParentHandler, pObject);
  this->_pObject = pObject;
}

CesiumJsonWriter::IJsonHandler*
AccessorSparseIndicesJsonHandler::writeObjectKey(const std::string_view& str) {
  assert(this->_pObject);
  return this->writeObjectKeyAccessorSparseIndices(
      AccessorSparseIndices::TypeName,
      str,
      *this->_pObject);
}

CesiumJsonWriter::IJsonHandler*
AccessorSparseIndicesJsonHandler::writeObjectKeyAccessorSparseIndices(
    const std::string& objectType,
    const std::string_view& str,
    AccessorSparseIndices& o) {
  using namespace std::string_literals;

  if ("bufferView"s == str)
    return property("bufferView", this->_bufferView, o.bufferView);
  if ("byteOffset"s == str)
    return property("byteOffset", this->_byteOffset, o.byteOffset);
  if ("componentType"s == str)
    return property("componentType", this->_componentType, o.componentType);

  return this->writeObjectKeyExtensibleObject(objectType, str, *this->_pObject);
}
