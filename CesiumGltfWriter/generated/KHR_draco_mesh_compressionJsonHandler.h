// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <CesiumGltf/KHR_draco_mesh_compression.h>
#include <CesiumJsonWriter/DictionaryJsonHandler.h>
#include <CesiumJsonWriter/ExtensibleObjectJsonHandler.h>
#include <CesiumJsonWriter/IntegerJsonHandler.h>

namespace CesiumJsonWriter {
class ExtensionWriterContext;
}

namespace CesiumGltf {
class KHR_draco_mesh_compressionJsonHandler
    : public CesiumJsonWriter::ExtensibleObjectJsonHandler,
      public CesiumJsonWriter::IExtensionJsonHandler {
public:
  using ValueType = KHR_draco_mesh_compression;

  static inline constexpr const char* ExtensionName =
      "KHR_draco_mesh_compression";

  KHR_draco_mesh_compressionJsonHandler(
      const CesiumJsonWriter::ExtensionWriterContext& context) noexcept;
  void reset(IJsonHandler* pParentHandler, KHR_draco_mesh_compression* pObject);

  virtual IJsonHandler* writeObjectKey(const std::string_view& str) override;

  virtual void reset(
      IJsonHandler* pParentHandler,
      CesiumUtility::ExtensibleObject& o,
      const std::string_view& extensionName) override;

  virtual IJsonHandler* writeNull() override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeNull();
  };
  virtual IJsonHandler* writeBool(bool b) override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeBool(b);
  }
  virtual IJsonHandler* writeInt32(int32_t i) override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeInt32(i);
  }
  virtual IJsonHandler* writeUint32(uint32_t i) override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeUint32(i);
  }
  virtual IJsonHandler* writeInt64(int64_t i) override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeInt64(i);
  }
  virtual IJsonHandler* writeUint64(uint64_t i) override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeUint64(i);
  }
  virtual IJsonHandler* writeDouble(double d) override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeDouble(d);
  }
  virtual IJsonHandler* writeString(const std::string_view& str) override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeString(str);
  }
  virtual IJsonHandler* writeObjectStart() override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeObjectStart();
  }
  virtual IJsonHandler* writeObjectEnd() override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeObjectEnd();
  }
  virtual IJsonHandler* writeArrayStart() override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeArrayStart();
  }
  virtual IJsonHandler* writeArrayEnd() override {
    return CesiumJsonWriter::ExtensibleObjectJsonHandler::writeArrayEnd();
  }
  virtual void reportWarning(
      const std::string& warning,
      std::vector<std::string>&& context =
          std::vector<std::string>()) override {
    CesiumJsonWriter::ExtensibleObjectJsonHandler::reportWarning(
        warning,
        std::move(context));
  }

protected:
  IJsonHandler* writeObjectKeyKHR_draco_mesh_compression(
      const std::string& objectType,
      const std::string_view& str,
      KHR_draco_mesh_compression& o);

private:
  KHR_draco_mesh_compression* _pObject = nullptr;
  CesiumJsonWriter::IntegerJsonHandler<int32_t> _bufferView;
  CesiumJsonWriter::DictionaryJsonHandler<
      int32_t,
      CesiumJsonWriter::IntegerJsonHandler<int32_t>>
      _attributes;
};
} // namespace CesiumGltf
